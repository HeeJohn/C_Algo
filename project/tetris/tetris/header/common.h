#ifndef COMMON_H
#define COMMON_H

#define _CRT_SECURE_NO_WARNINGS

#include<windows.h>
#include<conio.h>
#include<time.h>
#include<stdlib.h>
#include<stdio.h>

/* ---------- BOOLEAN ---------- */
#define false 0
#define true 1

/* ---------- 조작키 별 ASCI값 ---------- */

#define LEFT 75 //좌로 이동    //키보드값들 
#define RIGHT 77 //우로 이동 a
#define UP 72 //회전 
#define DOWN 80 //soft drop
#define SPACE 32 //hard drop
#define p 112 //일시정지 
#define P 80 //일시정지
#define ESC 27 //게임종료 

int key; //키보드로 입력받은 키값을 저장 

/* ---------- 게임보드 배열에 저장될 블록의 상태들 ---------- */

#define ACTIVE_BLOCK -2 // 게임판배열에 저장될 블록의 상태들 
#define CEILLING -1     // 블록이 이동할 수 있는 공간은 0 또는 음의 정수료 표현 
#define EMPTY 0         // 블록이 이동할 수 없는 공간은 양수로 표현 
#define WALL 1
#define INACTIVE_BLOCK 2 // 이동이 완료된 블록값 



/* ---------- 게임 보드 크기 ---------- */

#define BOARD_X 11 //게임판 가로크기 
#define BOARD_Y 23 //게임판 세로크기 
#define BOARD_X_ADJ 3 //게임판 위치조정 
#define BOARD_Y_ADJ 1 //게임판 위치조정 
#define STATUS_X_ADJ BOARD_X_ADJ+BOARD_X+1 //게임정보표시 위치조정 



/* ---------- 게임상태 표시창 위치 정보 ---------- */

int STATUS_Y_GOAL; //GOAL 정보표시위치Y 좌표 저장 
int STATUS_Y_LEVEL; //LEVEL 정보표시위치Y 좌표 저장
int STATUS_Y_SCORE; //SCORE 정보표시위치Y 좌표 저장


/* ---------- 테트리스 블록 모양 4차원 배열 ( 2차원 모양 여러개 + 회전 포함 ) ---------- */
int blocks[7][4][4][4] =   {
    

/*----------- ㅁ 모양 -----------*/

      {{0,0,0,0,
        0,1,1,0,
        0,1,1,0,
        0,0,0,0},//ㅁ 모양

       {0,0,0,0,
        0,1,1,0,
        0,1,1,0,
        0,0,0,0},

       {0,0,0,0,
        0,1,1,0,
        0,1,1,0,
        0,0,0,0},

       {0,0,0,0,
        0,1,1,0,
        0,1,1,0,
        0,0,0,0}},


/*----------- ㅡ모양 -----------*/

      {{0,0,0,0,
        0,0,0,0,
        1,1,1,1,
        0,0,0,0},//ㅡ모양

       {0,1,0,0,
        0,1,0,0,
        0,1,0,0,
        0,1,0,0},

       {0,0,0,0,
        0,0,0,0,
        1,1,1,1,
        0,0,0,0},

       {0,1,0,0,
        0,1,0,0,
        0,1,0,0,
        0,1,0,0}},

/*----------- ㄹ 모양  -----------*/

      {{0,0,0,0,
        1,1,0,0,
        0,1,1,0,
        0,0,0,0},//ㄹ모양 

       {0,0,0,0,
        0,0,1,0,
        0,1,1,0,
        0,1,0,0},

       {0,0,0,0,
        1,1,0,0,
        0,1,1,0,
        0,0,0,0},

       {0,0,0,0,
        0,0,1,0,
        0,1,1,0,
        0,1,0,0}},

/*----------- ㄹ 반대모양 -----------*/

      {{0,0,0,0,
        0,1,1,0,
        1,1,0,0,
        0,0,0,0},//ㄹ반대모양

       {0,0,0,0,
        1,0,0,0,
        1,1,0,0,
        0,1,0,0},

       {0,0,0,0,
        0,1,1,0,
        1,1,0,0,
        0,0,0,0},

       {0,0,0,0,
        1,0,0,0,
        1,1,0,0,
        0,1,0,0}},

/*----------- ㄴ반대모양 -----------*/

      {{0,0,0,0,
        0,0,1,0,
        1,1,1,0,
        0,0,0,0},//ㄴ반대모양

       {0,0,0,0,
        1,1,0,0,
        0,1,0,0,
        0,1,0,0},

       {0,0,0,0,
        0,0,0,0,
        1,1,1,0,
        1,0,0,0},

       {0,0,0,0,
        0,1,0,0,
        0,1,0,0,
        0,1,1,0}},
/*----------- ㄴ반대모양 -----------*/

      {{0,0,0,0,
        1,0,0,0,
        1,1,1,0,
        0,0,0,0},//ㄴ모양

       {0,0,0,0,
        0,1,0,0,
        0,1,0,0,
        1,1,0,0},

       {0,0,0,0,
        0,0,0,0,
        1,1,1,0,
        0,0,1,0},

       {0,0,0,0,
        0,1,1,0,
        0,1,0,0,
        0,1,0,0}},

/*----------- ㅗ모양 -----------*/

       {{0,0,0,0,
         0,1,0,0,
         1,1,1,0,
         0,0,0,0},//ㅗ모양

       {0,0,0,0,
        0,1,0,0,
        0,1,1,0,
        0,1,0,0},

       {0,0,0,0,
        0,0,0,0,
        1,1,1,0,
        0,1,0,0},

       {0,0,0,0,
        0,1,0,0,
        1,1,0,0,
        0,1,0,0}}

}; //블록모양 저장 4*4공간에 블록을 표현 blocks[b_type][b_rotation][i][j]로 사용 

/* ------------------ 블록모양 결정 변수 ------------------ */

int b_type; //블록 종류를 저장 
int b_rotation; //블록 회전값 저장 
int b_type_next; //다음 블록값 저장 

/* ------------------ 게임보드 정보 저장 (이전 & 현재) ------------------ */
/* 
* 보드 전체를 실시간으로 변경할 경우 UI 깜빡거림 
* board_prev와 배열을 비교해서 값이 달라진 곳만 모니터에 고침 
*/

int board_curr[BOARD_Y][BOARD_X]; //현재 보드를 저장하는 배열
                                  //모니터에 표시후에 board_prev로 복사됨
                                   
int board_prev[BOARD_Y][BOARD_X]; //이전 보드를 저장하는 배열
                                  //모니터에 표시되기 전의 정보를 가지고 있음 


/* ------------------ 블록 좌표 ------------------ */

int bx, by; //이동중인 블록의 게임판상의 x,y좌표를 저장 

/* ------------------ 게임상태 변수 ------------------ */

int speed; //게임진행속도 
int level; //현재 level 
int level_goal; //다음레벨로 넘어가기 위한 목표점수 
int cnt; //현재 레벨에서 제거한 줄 수를 저장 
int score; //현재 점수 
int last_score = 0; //마지막게임점수 
int best_score = 0; //최고게임점수 


/* ------------------ 변화 플래그 ------------------ */

int create_nblock_on = 0; //새로운 블럭이 필요함을 알리는 flag 
int crush_on = 0; //현재 이동중인 블록이 충돌상태인지 알려주는 flag 
int level_up_on = 0; //다음레벨로 진행(현재 레벨목표가 완료되었음을) 알리는 flag 
int space_key_on = 0; //hard drop상태임을 알려주는 flag 

/* ------------------ 커서 ------------------ */

typedef enum { NOCURSOR, SOLIDCURSOR, NORMALCURSOR } CURSOR_TYPE; //커서숨기는 함수에 사용되는 열거형 




#endif // !COMMON_H
